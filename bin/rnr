#! /usr/bin/env ruby

require 'pathname'
require 'rename_radically'
require 'yaml'



###############################################################################
### Helper functions                                                        ###
###############################################################################

# Prints out the help reference.
def show_help( exit_value )
  name = "#{File.basename $0}"

  puts <<-EOF
\e[33mReNameRadically: a simple file renamer who mostly hates spaces.\e[0m
\e[33mUsage:\e[0m
\e[34m#{name} <files>\e[0m: recursively renames the given  files and folders to a CamelCase format.
\e[34m#{name} -w/--widen <files>\e[0m: recursively renames the given files and folders adding spaces when needed.
\e[34m#{name} -r/--regex <regex> <substitute> <files>\e[0m: recursively renames the given files and folders replacing any match of the given regex with the given substitute.
\e[34m#{name} -s/--script <files>\e[0m: creates a bash script to quickly rename the given files and folders, for whenever the other modalities cannot yield the desired result.
\e[34m#{name} -h\e[0m: shows this help reference.

\e[33mNOTE\e[0m: if no files are specified to a command, it will process every file in the current folder.

\e[33mNOTE\e[0m: the whole procedure can be simulated using the --dry-run flag.

\e[33mNOTE\e[0m: check out the configuration file located in \e[34m~/.config/rnr/config.yml\e[0m to add your personal tweaks.
  EOF

  exit exit_value.to_i
end



###############################################################################
### Logic entry point                                                       ###
###############################################################################

# Help reference check:
if [ '-h', '--help' ].include? ARGV[ 0 ] then
  show_help 0
end

# Create a config file for the application if it does not already exist:
config = Pathname.new "#{ENV[ 'HOME' ]}/.config/rnr/config.yml"
unless config.exist? then
  config.dirname.mkpath
  config.write <<-EOF
# Characters treated as spaces, which get removed while renaming a file in
# non-wide mode:
:as_spaces:
  - "_"

# Characters after which a word should be capitalized in non-wide mode:
:delimiters:
  - "-"
  - "+"
  - "("
  - ")"
  - "["
  - "]"
  - "{"
  - "}"
  - "'"
  - "&"
  - "."
  - "!"
  - "?"

# Characters after which must not be added a space in wide mode:
:ex_after:
  - "'"
  - "("
  - "-"
  - "<"
  - "["
  - "{"
  - "."

# Characters before which must not be added a space in wide mode:
:ex_before:
  - "."
  - ","
  - "?"
  - "!"
  - "'"
  - ")"
  - "]"
  - "}"
  - ">"
  - "-"
  - "_"

# Name of the script file created by renaming script mode:
:script: "REN.bash"

EOF

  puts "Created a new config file: #{config.realpath}"
end

# Parse the config:
config = YAML.load_file config.to_s

# Initialize the renamer:
rnr = ReNameRadically.new as_spaces: config[ :as_spaces ],
  delimiters: config[ :delimiters ],
  ex_after: config[ :ex_after ],
  ex_before: config[ :ex_before ],
  script: config[ :script ],
  dry_run: !ARGV.delete( '--dry-run' ).nil?

# Check the modality required by the user:
modality = :compact
r_pattern = ''
r_sub = ''
if ARGV[ 0 ].to_s[ 0 ] == '-' then
  case ARGV.shift
    when '-r', '--regex'
      if ARGV.size < 2 then
        show_help -1
      end
      modality = :regex
      r_pattern = ARGV.shift
      r_sub = ARGV.shift

    when '-s', '--script'
      modality = :script

    when '-w', '--widen'
      modality = :widen
  end
end

# Outcome container:
outcome = Hash.new

# Files to move:
files = ARGV

# If ARGV is empty we gotta make sure the user actually wants to rename
# everything in the current folder:
if files.empty? then
  # Ask for confirmation before doing anything:
  print 'Do you really want to rename every file and folder in the ' \
    "current directory (#{Dir.pwd})? [y/N] "
  unless 'Y' == STDIN.gets.chomp.upcase then
    puts 'Operation aborted.'
    exit 0
  end

  # If we got here add in every child of the current folder to ARGV:
  files = Pathname.new( '.' ).children if files.empty?
end

# This one calls a different function than the rest:
if modality == :script then
  outcome = rnr.create_renaming_script files

  if outcome.nil? then
    puts 'Unable to write the renaming script in the current folder.'
    exit -2
  end

  puts "Created script '#{rnr.script}'."

# Everything else is straightforward:
else
  # Perform the renaming:
  outcome = rnr.rename files: files,
    modality: modality,
    r_pattern: r_pattern,
    r_sub: r_sub
end

# Warning about missing files and insufficient permissions:
puts 'File(s) not found:' if outcome[ :not_found ].any?
outcome[ :not_found ].each do |f|
  puts " - #{f}"
end

puts 'Insufficient permissions to move:' if outcome[ :no_permissions ].any?
outcome[ :no_permissions ].each do |f|
  puts " - #{f}"
end

